首先说一下，虽然本题有记录还有三个wp，但是题目本身不难，只是有点想法就记下来了

首先
1.exp.py是我自己调试写出来的exp，还没在网上哪个师傅的博客上看到这种写法，虽然比较复杂但是是自己独立想出来的，还是挺开心的

它的思想是我看到了hint也没看到下面的jmp esp，所以就往sub     esp, 24h；ret上想了，很明显的一个栈偏移，在栈缓冲区写入ret2libc即可

但是一开始攻击失败，原因是sub     esp, 24h，将esp减去0x24后其实是在缓冲区前4字节（io= gdb.debug(binary,"break *0x080485A0")得知），所以需要加入四字节的ret_addr才能

到缓冲区我们写入的rop链，加入后攻击成功

2.exp_libc.py就是最正统的32位ret2libc写法，所以说其实本题的溢出字节是够正常ret2libc的，只是上面我看到hint想多了。。。

3.exp_shellcode.py和exp.py类似，都是利用栈偏移的思想，也是网上师傅们博客使用的主流exp（虽然我觉得直接ret2libc才比较好），但是是使用了hint下面的jmp esp

所以还利用asm写入栈偏移的汇编才完成攻击，感觉是最不具有普适性的，当然如果有远程libc的版本实在是不出来的情况，这种方法肯定才是正解，所以也记录下